#!/bin/env scala
// vim: set ft=scala :

val comma = ", "
def T(i: Int) = (64+i).toChar.toString
def member(i: Int) = "t._"+i

for (a <- (2 to 9)) {
  def m (f: Int => String): List[String] = (1 to a).toList.map(f)
  def mc(f: Int => String): String = m(f).mkString(comma)
  def mt(f: Int => String): String = m(f).mkString("(",comma,")")

  var o = List.empty[String]
  for (i <- (1 to a)) {
    val c = T(i)

    def l (hit: String, miss: Int => String): List[String] = (1 to a).toList.map(j => if (i==j) hit else miss(j))
    def lc(hit: String, miss: Int => String): String = l(hit,miss).mkString(comma)
    def lt(hit: String, miss: Int => String): String = l(hit,miss).mkString("(",comma,")")

    o ::= s"@inline def map$i[X](f: $c => X): (${lc("X",T)}) = ${lt(s"f(t._$i)", member)}"
    o ::= s"@inline def put$i[X](x: X): (${lc("X",T)}) = ${lt("x", "t._"+_)}"

    if (a <= 4) {
      def wrap(l: List[String]) = {
        val x = l.filter(_.nonEmpty)
        val s = x mkString comma
        if (x.length > 1) s"($s)" else s
      }
      val rt = wrap(l("",T))
      val rv = wrap(l("",member))
      o ::= s"@inline def consume$i[U](f: ${T(i)} => U): $rt = {f(t._$i); $rv}"
    }
  }

  println(s"@inline final implicit class JSLE_Tuple${a}[${mc(T)}](private val t: ${mt(T)}) extends AnyVal {")
  println(o.sorted.map("  "+_) mkString "\n")
  println("}")
}
println()
